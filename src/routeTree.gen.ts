/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
// Import Routes
import { Route as rootRoute } from "./routes/__root";
import { Route as AuthLoginImport } from "./routes/_auth/login";
import { Route as AuthRegisterImport } from "./routes/_auth/register";
import { Route as AuthRouteImport } from "./routes/_auth/route";
import { Route as AuthenticatedBookmarksSlugImport } from "./routes/_authenticated/bookmarks/$slug";
import { Route as AuthenticatedRouteImport } from "./routes/_authenticated/route";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const AuthenticatedRouteRoute = AuthenticatedRouteImport.update({
  id: "/_authenticated",
  getParentRoute: () => rootRoute,
} as any);

const AuthRouteRoute = AuthRouteImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AuthRegisterRoute = AuthRegisterImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthLoginRoute = AuthLoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthenticatedBookmarksSlugRoute = AuthenticatedBookmarksSlugImport.update(
  {
    id: "/bookmarks/$slug",
    path: "/bookmarks/$slug",
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any
);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/_authenticated": {
      id: "/_authenticated";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthenticatedRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/login": {
      id: "/_auth/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/register": {
      id: "/_auth/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof AuthRegisterImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_authenticated/bookmarks/$slug": {
      id: "/_authenticated/bookmarks/$slug";
      path: "/bookmarks/$slug";
      fullPath: "/bookmarks/$slug";
      preLoaderRoute: typeof AuthenticatedBookmarksSlugImport;
      parentRoute: typeof AuthenticatedRouteImport;
    };
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthRegisterRoute: typeof AuthRegisterRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren
);

interface AuthenticatedRouteRouteChildren {
  AuthenticatedBookmarksSlugRoute: typeof AuthenticatedBookmarksSlugRoute;
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedBookmarksSlugRoute: AuthenticatedBookmarksSlugRoute,
};

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "": typeof AuthenticatedRouteRouteWithChildren;
  "/login": typeof AuthLoginRoute;
  "/register": typeof AuthRegisterRoute;
  "/bookmarks/$slug": typeof AuthenticatedBookmarksSlugRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "": typeof AuthenticatedRouteRouteWithChildren;
  "/login": typeof AuthLoginRoute;
  "/register": typeof AuthRegisterRoute;
  "/bookmarks/$slug": typeof AuthenticatedBookmarksSlugRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/_auth": typeof AuthRouteRouteWithChildren;
  "/_authenticated": typeof AuthenticatedRouteRouteWithChildren;
  "/_auth/login": typeof AuthLoginRoute;
  "/_auth/register": typeof AuthRegisterRoute;
  "/_authenticated/bookmarks/$slug": typeof AuthenticatedBookmarksSlugRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "" | "/login" | "/register" | "/bookmarks/$slug";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "" | "/login" | "/register" | "/bookmarks/$slug";
  id:
    | "__root__"
    | "/"
    | "/_auth"
    | "/_authenticated"
    | "/_auth/login"
    | "/_auth/register"
    | "/_authenticated/bookmarks/$slug";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRouteRoute: typeof AuthRouteRouteWithChildren;
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_authenticated"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated/route.tsx",
      "children": [
        "/_authenticated/bookmarks/$slug"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_authenticated/bookmarks/$slug": {
      "filePath": "_authenticated/bookmarks/$slug.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
