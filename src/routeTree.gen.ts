/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
import { Route as authAuthImport } from "./routes/(auth)/_auth";
import { Route as authAuthLoginImport } from "./routes/(auth)/_auth/login";
import { Route as authAuthRegisterImport } from "./routes/(auth)/_auth/register";
// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as DashboardLayoutImport } from "./routes/dashboard/_layout";
import { Route as DashboardLayoutBookmarksFolderSlugImport } from "./routes/dashboard/_layout/bookmarks/$folderSlug";
import { Route as DashboardLayoutIndexImport } from "./routes/dashboard/_layout/index";
import { Route as IndexImport } from "./routes/index";
import { createFileRoute } from "@tanstack/react-router";

// Create Virtual Routes

const DashboardImport = createFileRoute("/dashboard")();
const authImport = createFileRoute("/(auth)")();

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => rootRoute,
} as any);

const authRoute = authImport.update({
  id: "/(auth)",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const DashboardLayoutRoute = DashboardLayoutImport.update({
  id: "/_layout",
  getParentRoute: () => DashboardRoute,
} as any);

const authAuthRoute = authAuthImport.update({
  id: "/_auth",
  getParentRoute: () => authRoute,
} as any);

const DashboardLayoutIndexRoute = DashboardLayoutIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DashboardLayoutRoute,
} as any);

const authAuthRegisterRoute = authAuthRegisterImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => authAuthRoute,
} as any);

const authAuthLoginRoute = authAuthLoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => authAuthRoute,
} as any);

const DashboardLayoutBookmarksFolderSlugRoute =
  DashboardLayoutBookmarksFolderSlugImport.update({
    id: "/bookmarks/$folderSlug",
    path: "/bookmarks/$folderSlug",
    getParentRoute: () => DashboardLayoutRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/(auth)": {
      id: "/(auth)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authImport;
      parentRoute: typeof rootRoute;
    };
    "/(auth)/_auth": {
      id: "/(auth)/_auth";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authAuthImport;
      parentRoute: typeof authRoute;
    };
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardImport;
      parentRoute: typeof rootRoute;
    };
    "/dashboard/_layout": {
      id: "/dashboard/_layout";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardLayoutImport;
      parentRoute: typeof DashboardRoute;
    };
    "/(auth)/_auth/login": {
      id: "/(auth)/_auth/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof authAuthLoginImport;
      parentRoute: typeof authAuthImport;
    };
    "/(auth)/_auth/register": {
      id: "/(auth)/_auth/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof authAuthRegisterImport;
      parentRoute: typeof authAuthImport;
    };
    "/dashboard/_layout/": {
      id: "/dashboard/_layout/";
      path: "/";
      fullPath: "/dashboard/";
      preLoaderRoute: typeof DashboardLayoutIndexImport;
      parentRoute: typeof DashboardLayoutImport;
    };
    "/dashboard/_layout/bookmarks/$folderSlug": {
      id: "/dashboard/_layout/bookmarks/$folderSlug";
      path: "/bookmarks/$folderSlug";
      fullPath: "/dashboard/bookmarks/$folderSlug";
      preLoaderRoute: typeof DashboardLayoutBookmarksFolderSlugImport;
      parentRoute: typeof DashboardLayoutImport;
    };
  }
}

// Create and export the route tree

interface authAuthRouteChildren {
  authAuthLoginRoute: typeof authAuthLoginRoute;
  authAuthRegisterRoute: typeof authAuthRegisterRoute;
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginRoute: authAuthLoginRoute,
  authAuthRegisterRoute: authAuthRegisterRoute,
};

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren
);

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren;
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
};

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren);

interface DashboardLayoutRouteChildren {
  DashboardLayoutIndexRoute: typeof DashboardLayoutIndexRoute;
  DashboardLayoutBookmarksFolderSlugRoute: typeof DashboardLayoutBookmarksFolderSlugRoute;
}

const DashboardLayoutRouteChildren: DashboardLayoutRouteChildren = {
  DashboardLayoutIndexRoute: DashboardLayoutIndexRoute,
  DashboardLayoutBookmarksFolderSlugRoute:
    DashboardLayoutBookmarksFolderSlugRoute,
};

const DashboardLayoutRouteWithChildren = DashboardLayoutRoute._addFileChildren(
  DashboardLayoutRouteChildren
);

interface DashboardRouteChildren {
  DashboardLayoutRoute: typeof DashboardLayoutRouteWithChildren;
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardLayoutRoute: DashboardLayoutRouteWithChildren,
};

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren
);

export interface FileRoutesByFullPath {
  "/": typeof authAuthRouteWithChildren;
  "/dashboard": typeof DashboardLayoutRouteWithChildren;
  "/login": typeof authAuthLoginRoute;
  "/register": typeof authAuthRegisterRoute;
  "/dashboard/": typeof DashboardLayoutIndexRoute;
  "/dashboard/bookmarks/$folderSlug": typeof DashboardLayoutBookmarksFolderSlugRoute;
}

export interface FileRoutesByTo {
  "/": typeof authAuthRouteWithChildren;
  "/dashboard": typeof DashboardLayoutIndexRoute;
  "/login": typeof authAuthLoginRoute;
  "/register": typeof authAuthRegisterRoute;
  "/dashboard/bookmarks/$folderSlug": typeof DashboardLayoutBookmarksFolderSlugRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/(auth)": typeof authRouteWithChildren;
  "/(auth)/_auth": typeof authAuthRouteWithChildren;
  "/dashboard": typeof DashboardRouteWithChildren;
  "/dashboard/_layout": typeof DashboardLayoutRouteWithChildren;
  "/(auth)/_auth/login": typeof authAuthLoginRoute;
  "/(auth)/_auth/register": typeof authAuthRegisterRoute;
  "/dashboard/_layout/": typeof DashboardLayoutIndexRoute;
  "/dashboard/_layout/bookmarks/$folderSlug": typeof DashboardLayoutBookmarksFolderSlugRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/dashboard"
    | "/login"
    | "/register"
    | "/dashboard/"
    | "/dashboard/bookmarks/$folderSlug";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/dashboard"
    | "/login"
    | "/register"
    | "/dashboard/bookmarks/$folderSlug";
  id:
    | "__root__"
    | "/"
    | "/(auth)"
    | "/(auth)/_auth"
    | "/dashboard"
    | "/dashboard/_layout"
    | "/(auth)/_auth/login"
    | "/(auth)/_auth/register"
    | "/dashboard/_layout/"
    | "/dashboard/_layout/bookmarks/$folderSlug";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  authRoute: typeof authRouteWithChildren;
  DashboardRoute: typeof DashboardRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRoute: authRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/login",
        "/(auth)/_auth/register"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard",
      "children": [
        "/dashboard/_layout"
      ]
    },
    "/dashboard/_layout": {
      "filePath": "dashboard/_layout.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/_layout/",
        "/dashboard/_layout/bookmarks/$folderSlug"
      ]
    },
    "/(auth)/_auth/login": {
      "filePath": "(auth)/_auth/login.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/register": {
      "filePath": "(auth)/_auth/register.tsx",
      "parent": "/(auth)/_auth"
    },
    "/dashboard/_layout/": {
      "filePath": "dashboard/_layout/index.tsx",
      "parent": "/dashboard/_layout"
    },
    "/dashboard/_layout/bookmarks/$folderSlug": {
      "filePath": "dashboard/_layout/bookmarks/$folderSlug.tsx",
      "parent": "/dashboard/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
